name: Test
 
on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  configure:
    runs-on: ubuntu-latest

    steps:
    - name: enable auto merge test (for Pull request)
      if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
      env:
        GITHUB: $${{  toJSON(github) }}
      uses: poad/github-pull-request-auto-merge-enable-action@v1.0.1
      with:
        pull_request_id: ${{ github.event.pull_request.node_id }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository:  ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: SQUASH


  build-lint:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.0.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: build
      run: |
        yarn install
        yarn lint --fix
        yarn build
        yarn test

  action-test:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        args: [
          {
            'yarn': 'false', 'path': './tests/package-test.json', 'ignore': '[]'
          },
          {
            'yarn': 'true', 'path': './tests/package-test.json', 'ignore': '[]'
          },
          {
            'yarn': 'false', 'path': './tests/package-test.json',
            'ignore': '[ "@types/jest", "jest", "jest-circus", "ts-jest" ]'
          },
          {
            'yarn': 'true', 'path': './tests/package-test.json',
            'ignore': '[ "@types/jest", "jest", "jest-circus", "ts-jest" ]'
          }
        ]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.0.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: prepare
      run: |
        TEMP=$(mktemp -d);
        PKG_JSON=${TEMP}/package.json
        cp -pR ${{ matrix.args.path }} ${PKG_JSON}
        echo "TEMP=${TEMP}" >> $GITHUB_ENV
        echo "PKG_JSON=${PKG_JSON}" >> $GITHUB_ENV
        lock_file=package-lock.json
        if [ ${{ matrix.args.yarn }} = 'true' ]; then
          lock_file=yarn.lock
        fi
        echo "LOCK_FILE=${TEMP}/${lock_file}" >> $GITHUB_ENV
    
    - name: update and test
      uses: './'
      with:
        yarn: ${{ matrix.args.yarn }}
        debug: true
        path: ${{ env.PKG_JSON }}
        ignore: |
          ${{ matrix.args.ignore }}

    - name: verify test result
      env:
        LOCK_FILE: ${{ env.LOCK_FILE }}
      run: test -e "${LOCK_FILE}" || exit 1
